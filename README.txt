2018-02-10
2018-02-22
-------------------------------------------------------------------------------

This is an (incomplete!!!) VAX simulator + assorted tools.

The simulator is somewhat realistic: it actually emulates a microarchitecture
controlled by microcode.  It should be relatively simple to implement that
microarchitecture in an FPGA -- or as "macro" electronics with lots of TTL
chips.

There is also an assembler and a disassembler + a tool that can read ODS-2
filesystems (which is what VMS uses).

The simulated VAX is mostly like a CVAX without the math chip:
 - all the floating-point instructions trap and must be handled by VAX code
   (ka655x.bin contains a floating-point simulator, I think)
 - CRC traps
 - EDITPC traps (used for COBOL support)
 - MATCHC, MOVTC, MOVTUC trap (rarely used block search/copy instructions)
 - decimal instructions trap (used for COBOL support)
 - vector instructions trap as if they are invalid instructions (they were not
   defined until after the CVAX)
 - octoword (128-bit integer) support (they were not defined until after the CVAX)
 - quadword (64-bit) support is included in the microcode but the microarchitecture
   itself is natively 32-bit.

The microcode source code is in the file src/ucode.vu and gets "assembled" to
a C include file (src/vax-ucode.h) by src/uasm.pl.

Other C/Perl tables necessary (src/vax-tables.h, src/vax-tables.pl) are
generated by src/instr-extr.pl.

----

See doc/readme.txt for more (but less organized) information.

---

Status:
 Nothing really quite works yet.

 Most of the code was written in a brief spurt during Summer 2017.

 I started with a simple experiment to see if would be feasible to write a VAX
 simulator that used realistic microcode.  I also wanted to see if it would be
 hard to let the decode of VAX macroinstructions/readout of microcode from ROM
 work out of sync with the execution of the generated microcode with a simulated
 buffer in between.

 That experiment was a success, even though it only handled less than a handful
 of instructions and in a very hacky way at that.

 I think I have a good microcode format and a good microarchitecture.  I need
 to write almost all the microcode that handles operands but I know how the
 operand microcode and the instruction microcode should communicate.

 Exception handling is only partly written but the microarchitecture and micro-
 code format fully supports it already.

 Almost none of the system microcode is written yet.

 Almost none of the processor registers (necessary for boot/operating systems/
 memory mapping etc) are implemented yet.

 Not all the code builds at the moment!  That's pretty bad.

 Only the disassembler builds in coverage analysis mode.

 The assembler and disassemblers are incomplete regarding operand formats.
 The disassembler isn't good enough yet at reading .desc files.

 I don't remember how good/bad the ODS-2 (Files-11) extraction tool is.


---


doc/
src/
misc/		Small experiments, such as syntax highlighting files for gedit.
		I couldn't make the syntax highlighting stuff work -- use OCaml
		instead.  It's not too bad for my VAX microcode.

---

ods2/		Various ODS-2/Files-11 readers + docs.  Most of those readers
		are various versions of the same old code from the 90's.

		Some of the files here are copyrighted by other people/
		organizations.

runtime/	Various VAX binaries to test the disassembler and simulator.
		Some are small VAX executables for NetBSD, OpenBSD, Ultrix, VMS.
		There's also a "BIOS" for a VAX, namely the ka655x.bin file.
		In order to help the disassembler, there's also a .desc file
		for ka655x.bin.

		There's also source code for a few small test programs of my
		own (test[123].c).

		Some of the files here are copyrighted by other people/
		organizations.

---

These files are from DEC (or are excerpts of DEC files).  They are taken from
Bob Supnik's website (simh.trailing-edge.com).

cvax-ucode/	Actual microcode source code from the CVAX by DEC.
dec-src/	Actual design documents about the CVAX by DEC.  There are a few
		typos in cvaxspec.txt section 2.4.1.
tables/		Extracts from the CVAX design documents that contain tables I
		need to refer to often.

---

This directory is generated by 'make cov' and deleted by 'make clean'.

cov/		Contains HTML files for a coverage analysis report.

		Coverage analysis versions of the assembler/disassembler/simu-
		lator require special builds:

			make asm.cov	(not supported yet)
			make dis.cov
			make sim.cov	(not supported yet)

		Run the coverage versions one or more times.  Each run gathers
		more coverage information:

			./asm xxxx	(not supported yet)
			./dis xxxx
			./sim xxxx	(not supported yet)

		Then create the coverage report:

			make cov

		The report is now created in the cov/ directory.  Open the file
		cov/index.html in a browser and start reading:

			gnome-open cov/index.html

			(or whatever the equivalent is in KDE)

		The report gets deleted with make clean:

			make clean

